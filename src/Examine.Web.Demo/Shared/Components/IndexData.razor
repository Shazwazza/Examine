@using Examine.Web.Demo.Data
@using Examine.Web.Demo.Data.Models
@using System.Diagnostics
@implements IDisposable
@inject IndexService IndexService

<div style="display:flex" class="mb-2">
    <h3>@Index?.Name</h3>
    <div style="display: flex; width: 100%; justify-content:flex-end; align-items:center">
        <p style="margin: auto 0">Auto-refresh:</p>
        <button style="font-size:12px;" class="btn btn-secondary col-1 mx-1 my-1 @(_timer.Enabled && _timer.Interval == 100 ? "active" : "")" @onclick="() => SetRefreshTimer(100)">100ms</button>
        <button style="font-size:12px;" class="btn btn-secondary col-1 mx-1 my-1 @(_timer.Enabled && _timer.Interval == 200 ? "active" : "")" @onclick="() => SetRefreshTimer(200)">200ms</button>
        <button style="font-size:12px;" class="btn btn-secondary col-1 mx-1 my-1 @(_timer.Enabled && _timer.Interval == 500 ? "active" : "")" @onclick="() => SetRefreshTimer(500)">500ms</button>
        <button style="font-size:12px;" class="btn btn-secondary col-1 mx-1 my-1 @(_timer.Enabled && _timer.Interval == 1000 ? "active" : "")" @onclick="() => SetRefreshTimer(1000)">1000ms</button>
        <button style="font-size:12px;" class="btn btn-secondary col-1 mx-1 my-1 @(!_timer.Enabled ? "active" : "")" @onclick="() => SetRefreshTimer(0)">Off</button>
    </div>
</div>
<div style="min-height: 60vh; margin-bottom:50px">
    <div class="row">
        <div class="col-12 border-bottom mb-1 fw-bold">Information</div>
        <div class="row mb-1">
            <div class="col-4">Document count</div>
            <div class="col-8">@Information?.DocumentCount</div>
        </div>
        <div class="row">
            <div class="col-4">Field count</div>
            <div class="col-8">@Information?.FieldCount</div>
        </div>

        <div style="display:flex; margin-top: 100px" class="col-12">
            <button class="btn btn-outline-primary col-2 me-2" @onclick="() => _showIndexFields = !_showIndexFields">@(_showIndexFields ? "Hide" : "Show") fields</button>
            <button class="btn btn-outline-primary col-2" @onclick="() => _showIndexOperations = !_showIndexOperations">@(_showIndexOperations ? "Hide" : "Show") logs</button>

            <div style="display:flex; gap:10px; width: 100%; justify-content:flex-end;">
                <div style="display:flex; flex-direction:column">
                    <input type="number" @bind="dataSize" />
                    <small>Document count on rebuild.</small>
                </div>
                <button class="btn btn-outline-danger" @onclick="() => RebuildIndex(Index?.Name ?? string.Empty, dataSize)" disabled="@IndexCommandsActive">Rebuild index</button>
                <button class="btn btn-outline-secondary" @onclick="() => RebuildIndex(Index?.Name ?? string.Empty, 0)" disabled="@IndexCommandsActive">Clear index</button>
            </div>
        </div>

        <div hidden="@(!_showIndexOperations)" class="row">
            <p class="col-12 border-bottom">Index operations (Resets on refresh)</p>
            <div style="display:flex; flex-direction:column-reverse">
                @foreach (var operation in _indexOperations)
                {
                    <p class="col-12">@operation</p>
                }
            </div>
        </div>

        <div hidden="@(!_showIndexFields)" class="row">
            <p class="col-12 border-bottom">Fields</p>
            @if(Information != null)
            {
                foreach (var field in Information.Fields)
                {
                    <p class="col-6">@field</p>
                }
            }
        </div>
        <div  class="row">
            <p class="col-12 border-bottom">Searchers</p>
            @if (Information != null)
            {
                foreach (var field in Information.Searchers)
                {
                    <p class="col-6">@field</p>
                }
            }
        </div>
        <div class="row">
            <p class="col-12 border-bottom">Suggesters</p>
            @if (Information != null)
            {
                foreach (var field in Information.Suggesters)
                {
                    <p class="col-6">@field</p>
                }
            }
        </div>
    </div>
</div>
@code {
    [Parameter, EditorRequired]
    public IIndex? Index { get; set; }

    [Parameter, EditorRequired]
    public IndexInformation? Information { get; set; }

    private bool _showIndexFields = false;
    private bool _showIndexOperations = false;
    private System.Timers.Timer _timer = new();
    private int dataSize = 27000;
    private List<string> _indexOperations = new();
    private Stopwatch _stopwatch = new();
    private bool IndexCommandsActive = false;

    private void RebuildIndex(string indexName, int dataSize)
    {
        IndexCommandsActive = true;
        _stopwatch.Start();
        IndexService.RebuildIndex(indexName, dataSize);
    }

    protected override void OnInitialized()
    {
        _timer = new System.Timers.Timer(1000);
        _timer.Elapsed += RefreshIndexInformation;
        _timer.Enabled = true;

        if(Index == null){
            throw new InvalidOperationException("Failed to get index");
        }

        Index.IndexOperationComplete += IndexOpreationComplete;
    }

    public void SetRefreshTimer(int refreshInterval)
    {
        _timer.Elapsed -= RefreshIndexInformation;
        if (refreshInterval > 0)
        {
            _timer.Interval = refreshInterval;
            _timer.Enabled = true;
            _timer.Elapsed += RefreshIndexInformation;
        }
        else
        {
            _timer.Enabled = false;
            _timer.Interval = 36000000;
        }
    }

    public async void RefreshIndexInformation(object? source, System.Timers.ElapsedEventArgs e)
    {
        if (Index == null)
        {
            throw new InvalidOperationException("Failed to get index");
        }

        Information = IndexService.GetIndexInformation(Index.Name);

        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void IndexOpreationComplete(object? sender, IndexOperationEventArgs e){
        _stopwatch.Stop();
        if (e.ItemsIndexed == 0)
        {
            _indexOperations.Add($"{e.Index.Name} cleared {e.ItemsIndexed:n0} documents in {_stopwatch.ElapsedMilliseconds} Milliseconds ({_stopwatch.Elapsed:g})");
        }
        else
        {
            _indexOperations.Add($"{e.Index.Name} indexed {e.ItemsIndexed:n0} documents in {_stopwatch.ElapsedMilliseconds} Milliseconds ({_stopwatch.Elapsed:g})");
        }
        _stopwatch.Reset();
        IndexCommandsActive = false;
        _showIndexOperations = true;
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
